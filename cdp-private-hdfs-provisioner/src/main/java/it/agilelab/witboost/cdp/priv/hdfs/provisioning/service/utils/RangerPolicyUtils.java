package it.agilelab.witboost.cdp.priv.hdfs.provisioning.service.utils;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;
import org.apache.ranger.plugin.model.RangerPolicy;

public class RangerPolicyUtils {

    private static final String COMPONENT_POLICY_NAME_PATTERN = "%s_access_policy";
    private static final String HDFS_SERVICE_TYPE = "HDFS";
    private static final List<String> DEFAULT_POLICY_LABELS = List.of("autogenerated");

    public static RangerPolicy rangerPolicy(
            String prefixName,
            String zoneName,
            String folderPath,
            String ownerRole,
            String userRole,
            String hdfsServiceName) {
        RangerPolicy rangerPolicy = new RangerPolicy();
        rangerPolicy.setId(-1L);
        rangerPolicy.setService(hdfsServiceName);
        rangerPolicy.setName(policyName(prefixName));
        rangerPolicy.setDescription(policyName(prefixName));
        rangerPolicy.setIsAuditEnabled(true);
        rangerPolicy.setIsEnabled(true);
        rangerPolicy.setResources(
                Map.of("path", new RangerPolicy.RangerPolicyResource(folderPath, false, true)));
        rangerPolicy.setPolicyItems(
                Stream.concat(ownerPolicyItems(ownerRole).stream(), userPolicyItems(userRole).stream())
                        .toList());
        rangerPolicy.setServiceType(HDFS_SERVICE_TYPE);
        rangerPolicy.setPolicyLabels(DEFAULT_POLICY_LABELS);
        rangerPolicy.setIsDenyAllElse(true);
        rangerPolicy.setZoneName(zoneName);
        rangerPolicy.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_NORMAL);
        return rangerPolicy;
    }

    public static RangerPolicy rangerPolicy(
            RangerPolicy existingRangerPolicy,
            String prefixName,
            String zoneName,
            String folderPath,
            String ownerRole,
            String userRole,
            String hdfsServiceName) {
        RangerPolicy rangerPolicy = new RangerPolicy();
        rangerPolicy.setId(existingRangerPolicy.getId());
        rangerPolicy.setService(hdfsServiceName);
        rangerPolicy.setName(policyName(prefixName));
        rangerPolicy.setDescription(policyName(prefixName));
        rangerPolicy.setIsAuditEnabled(true);
        rangerPolicy.setIsEnabled(true);
        rangerPolicy.setResources(
                Map.of("path", new RangerPolicy.RangerPolicyResource(folderPath, false, true)));
        rangerPolicy.setPolicyItems(
                Stream.concat(ownerPolicyItems(ownerRole).stream(), userPolicyItems(userRole).stream())
                        .toList());
        rangerPolicy.setServiceType(HDFS_SERVICE_TYPE);
        rangerPolicy.setPolicyLabels(DEFAULT_POLICY_LABELS);
        rangerPolicy.setIsDenyAllElse(true);
        rangerPolicy.setZoneName(zoneName);
        rangerPolicy.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_NORMAL);
        return rangerPolicy;
    }

    public static String policyName(String prefix) {
        return clean(String.format(COMPONENT_POLICY_NAME_PATTERN, prefix));
    }

    private static List<RangerPolicy.RangerPolicyItem> ownerPolicyItems(String ownerRole) {
        return List.of(
                new RangerPolicy.RangerPolicyItem(
                        List.of(
                                new RangerPolicy.RangerPolicyItemAccess("READ", true),
                                new RangerPolicy.RangerPolicyItemAccess("WRITE", true)),
                        Collections.emptyList(),
                        Collections.emptyList(),
                        List.of(ownerRole),
                        Collections.emptyList(),
                        false));
    }

    private static List<RangerPolicy.RangerPolicyItem> userPolicyItems(String userRole) {
        return List.of(
                new RangerPolicy.RangerPolicyItem(
                        List.of(new RangerPolicy.RangerPolicyItemAccess("READ", true)),
                        Collections.emptyList(),
                        Collections.emptyList(),
                        List.of(userRole),
                        Collections.emptyList(),
                        false));
    }

    private static String clean(String n) {
        return n.replaceAll("[^A-Za-z0-9_]", "_");
    }
}
